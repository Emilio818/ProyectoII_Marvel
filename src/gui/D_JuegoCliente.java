package gui;


import aplicacion.ManejoJSON;
import static gui.D_JuegoServidor.turno;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import logicadenegocios.Cliente;
import logicadenegocios.Conexion;
import logicadenegocios.Escenario;
import static logicadenegocios.Escenario.BOSQUE;
import static logicadenegocios.Escenario.CIUDAD;
import static logicadenegocios.Escenario.DESIERTO;
import static logicadenegocios.Escenario.MONTAÃ‘A;
import logicadenegocios.Estadistica;

import logicadenegocios.Personaje;
import logicadenegocios.ServidorLocal;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author emifu
 */
public class D_JuegoCliente extends javax.swing.JFrame implements Runnable{

    private Conexion conexion;
    private static String ip;
    private static int puerto;
    private Personaje personaje1;
    private Personaje personaje2;
    
    static DataInputStream din;
    static DataOutputStream dout;
    
    public static int turno = 1;
    public static int contTurnos = 0;
    /**
     *
     * @param conexion
     * @param personaje2
     */
    public D_JuegoCliente(Conexion conexion, Personaje personaje2) {
        this.conexion = conexion;
        this.personaje2 = personaje2;
        this.setLocationRelativeTo(null);
        initComponents();
        panelChat.setVisible(false);
        labelTipoUsuario.setText("Cliente: " + A_ControlAcceso.usuario);
        
        D_JuegoCliente.ip = conexion.getIp();
        D_JuegoCliente.puerto = conexion.getSl().getPuerto();
        ponerBg();
        
        try {
            Socket s = new Socket(conexion.getIp(), conexion.getSl().getPuerto());          
            s.close();
        } catch (IOException ex) {
            System.out.println("Error JuegoCliente Enviando personaje");
            System.out.println(ex.getMessage());
        }
        
        Thread cicloSecundario = new Thread(this);
        cicloSecundario.start();
        
        iniciarSprites();
    }   
    

            
            

    
    /**
     * Creates new form Escenario
     */
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelbg = new java.awt.Panel();
        panelChat = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        inputText = new javax.swing.JTextField();
        botonEnviar = new javax.swing.JButton();
        slotPersonaje1 = new javax.swing.JPanel();
        slotPersonaje2 = new javax.swing.JPanel();
        infoPersonaje1 = new javax.swing.JPanel();
        labelNombre1 = new javax.swing.JLabel();
        barVida1 = new javax.swing.JProgressBar();
        labelVida1 = new javax.swing.JLabel();
        infoPersonaje2 = new javax.swing.JPanel();
        labelNombre2 = new javax.swing.JLabel();
        barVida2 = new javax.swing.JProgressBar();
        labelVida2 = new javax.swing.JLabel();
        botonChat = new javax.swing.JButton();
        botonAtaque = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        labelTipoUsuario = new javax.swing.JLabel();
        labelBg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelbg.setMaximumSize(new java.awt.Dimension(900, 500));
        panelbg.setMinimumSize(new java.awt.Dimension(900, 500));
        panelbg.setName(""); // NOI18N
        panelbg.setPreferredSize(new java.awt.Dimension(900, 500));
        panelbg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelChat.setOpaque(false);
        panelChat.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        panelChat.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 340, 120));

        inputText.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        inputText.setText("Escribe algo . . .");
        inputText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputTextMouseClicked(evt);
            }
        });
        inputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextActionPerformed(evt);
            }
        });
        panelChat.add(inputText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 260, 30));

        botonEnviar.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        botonEnviar.setText("Send");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });
        panelChat.add(botonEnviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 70, 30));

        panelbg.add(panelChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 320, 360, 180));

        slotPersonaje1.setOpaque(false);
        slotPersonaje1.setPreferredSize(new java.awt.Dimension(300, 300));
        slotPersonaje1.setLayout(new java.awt.BorderLayout());
        panelbg.add(slotPersonaje1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));

        slotPersonaje2.setOpaque(false);
        slotPersonaje2.setPreferredSize(new java.awt.Dimension(300, 300));
        slotPersonaje2.setLayout(new java.awt.BorderLayout());
        panelbg.add(slotPersonaje2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, -1, -1));

        infoPersonaje1.setOpaque(false);
        infoPersonaje1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelNombre1.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        labelNombre1.setText("jLabel1");
        infoPersonaje1.add(labelNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 160, 30));

        barVida1.setValue(100);
        infoPersonaje1.add(barVida1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 160, 20));

        labelVida1.setText("jLabel1");
        infoPersonaje1.add(labelVida1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 26, 50, 20));

        panelbg.add(infoPersonaje1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 300, -1));

        infoPersonaje2.setOpaque(false);
        infoPersonaje2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelNombre2.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        labelNombre2.setText("jLabel1");
        infoPersonaje2.add(labelNombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 160, 30));

        barVida2.setValue(100);
        infoPersonaje2.add(barVida2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 160, 20));

        labelVida2.setText("jLabel1");
        infoPersonaje2.add(labelVida2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 26, 50, 20));

        panelbg.add(infoPersonaje2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, 300, -1));

        botonChat.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        botonChat.setText("Chat");
        botonChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonChatActionPerformed(evt);
            }
        });
        panelbg.add(botonChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, -1, -1));

        botonAtaque.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        botonAtaque.setText("Atacar");
        botonAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAtaqueActionPerformed(evt);
            }
        });
        panelbg.add(botonAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, -1, -1));

        botonSalir.setFont(new java.awt.Font("Comic Book", 0, 12)); // NOI18N
        botonSalir.setText("Salir");
        panelbg.add(botonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, -1, -1));

        labelTipoUsuario.setFont(new java.awt.Font("Comic Book", 0, 36)); // NOI18N
        panelbg.add(labelTipoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 660, 90));

        labelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/bg/Ciudad.jpg"))); // NOI18N
        panelbg.add(labelBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(panelbg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
        try {
            System.out.println("Cliente: Enviando Mensaje . . .");
            Socket s = new Socket(conexion.getIp(), conexion.getSl().getPuerto());
            dout = new DataOutputStream(s.getOutputStream());
            dout.writeUTF(A_ControlAcceso.usuario + ": " + inputText.getText());
            System.out.println("Cliente: Mensaje enviado . . .");
            textArea.setText(textArea.getText() + A_ControlAcceso.usuario + ": " +  inputText.getText() + "\n");
            inputText.setText("");
        } catch (IOException ex) {
            System.out.println("Error JuegoCliente Boton enviar");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void inputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextActionPerformed

    private void botonChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonChatActionPerformed
        if (panelChat.isVisible()){
            panelChat.setVisible(false);
        } else{
            panelChat.setVisible(true);
        }
    }//GEN-LAST:event_botonChatActionPerformed

    private void botonAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAtaqueActionPerformed
        if ( D_JuegoCliente.turno == 2){
            barVida1.setValue(barVida1.getValue() - personaje2.getpDatosHeroe().getpPoder().poderTotal());
            labelVida1.setText("" +barVida1.getValue());
            if (barVida1.getValue() <= 0) {
                crearEstadistica("Victoria");
                E_Victoria ev = new E_Victoria();
                ev.setVisible(true);
                this.dispose();
            }
            D_JuegoCliente.turno = 1;
            JOptionPane.showMessageDialog(null, "Turno del Servidor");
            try {
                System.out.println("Cliente: Enviando Ataque . . .");
                Socket s = new Socket(conexion.getIp(), conexion.getSl().getPuerto());
                dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF("atacar");
                System.out.println("Cliente: Ataque enviado . . .");
            } catch (IOException ex) {
                System.out.println("Error Cliente Boton Ataque");
                System.out.println(ex.getMessage());
            }
        } else {
           JOptionPane.showMessageDialog(null, "Es Turno del Servidor"); 
        }    
        
    }//GEN-LAST:event_botonAtaqueActionPerformed

    private void inputTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputTextMouseClicked
        if (inputText.getText().trim().isEmpty() | inputText.getText().equals("Escribe algo . . .")){
            inputText.setText("");
        }
    }//GEN-LAST:event_inputTextMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(D_JuegoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new D_JuegoCliente(null, null).setVisible(true);
            }
        });
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barVida1;
    private javax.swing.JProgressBar barVida2;
    private javax.swing.JButton botonAtaque;
    private javax.swing.JButton botonChat;
    private javax.swing.JButton botonEnviar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JPanel infoPersonaje1;
    private javax.swing.JPanel infoPersonaje2;
    private javax.swing.JTextField inputText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBg;
    private javax.swing.JLabel labelNombre1;
    private javax.swing.JLabel labelNombre2;
    private javax.swing.JLabel labelTipoUsuario;
    private javax.swing.JLabel labelVida1;
    private javax.swing.JLabel labelVida2;
    private javax.swing.JPanel panelChat;
    private java.awt.Panel panelbg;
    private javax.swing.JPanel slotPersonaje1;
    private javax.swing.JPanel slotPersonaje2;
    private static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private void ponerSprites() {
        SpritePersonaje spritePersonaje1 = new SpritePersonaje( personaje1.getpDatosHeroe().getmPseudonimo(),"1");
        SpritePersonaje spritePersonaje2 = new SpritePersonaje( personaje2.getpDatosHeroe().getmPseudonimo(),"2");
        
        spritePersonaje1.setSize(300, 300);
        spritePersonaje2.setSize(300, 300);
        spritePersonaje1.setLocation(0, 0);
        spritePersonaje2.setLocation(0, 0);
        slotPersonaje1.removeAll();
        slotPersonaje2.removeAll();
        slotPersonaje1.add(spritePersonaje1);
        slotPersonaje2.add(spritePersonaje2);
        slotPersonaje1.revalidate();
        slotPersonaje2.revalidate();
        slotPersonaje1.repaint();
        slotPersonaje2.repaint();
        
        llenarLabels();
    }
    private void ponerBg() {
        Escenario escenario = conexion.getSl().getCiudad().getEscenario();
        switch (escenario) {
            case CIUDAD -> labelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/bg/Ciudad.jpg"))); // NOI18N
            case MONTAÃ‘A -> labelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/bg/MontaÃ±a.jpg"))); // NOI18N
            case BOSQUE -> labelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/bg/Bosque.jpg"))); // NOI18N
            case DESIERTO -> labelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/bg/Desierto.jpg"))); // NOI18N
            default -> {
            }
        }
    }

    @Override
    public void run() {
        System.out.println("Cliente: Iniciando rama segundaria");
        try {
            conexion.setSs(new ServerSocket(conexion.getSl().getPuerto() + 1));
            
            while (true){
                System.out.println("Cliente: Esperando Instruccion");
                Socket s = conexion.getSs().accept();  
                System.out.println("Cliente: Instruccion aceptada");
                System.out.println(s.getInputStream().getClass());
                System.out.println(Personaje.class);
                if (personaje1 == null){
                    ObjectInputStream paquete_datos = new ObjectInputStream(s.getInputStream());
                    personaje1 = (Personaje) paquete_datos.readObject();
                    System.out.println("Cliente "+ personaje1);    
                    ponerSprites();
                    
                    
                    paquete_datos.close();
                } else {
                    din = new DataInputStream(s.getInputStream());  
                    String textDin = din.readUTF();
                    evento(textDin);
                    din.close();
                }                
                s.close();
                System.out.println("Cliente: Instruccion Finalizada");
                }
 
            
        } catch (IOException | ClassNotFoundException ex) {
            System.out.println("Cliente: Error");
            System.out.println(ex.getMessage());
        }    
    }
    
    private void evento(String textDin) {
        if ( textDin.equals("atacar")) {
           barVida2.setValue(barVida2.getValue() - personaje1.getpDatosHeroe().getpPoder().poderTotal());
           labelVida2.setText("" +barVida2.getValue());
           if (barVida2.getValue() <= 0) {
                crearEstadistica("Derrota");
                E_Derrota ed = new E_Derrota();
                ed.setVisible(true);
                this.dispose();
           }
           D_JuegoCliente.turno = 2;
        } else {
            System.out.println("Mensaje Recibido");
            textArea.setText(textArea.getText() + textDin + "\n"); 
        }
        
    }
    
    private void iniciarSprites() {
        try {
            Socket s = new Socket(conexion.getIp(), conexion.getSl().getPuerto());
            ObjectOutputStream paquete_datos = new ObjectOutputStream(s.getOutputStream());
            System.out.println("Cliente: Enviando Personaje");
            paquete_datos.writeObject(personaje2);
            System.out.println("Cliente: Personaje Enviado");
            System.out.println("Cliente " + personaje2);
        } catch (IOException ex) {
            System.out.println("Error JuegoCliente Enviando personaje");
            System.out.println(ex.getMessage());
        }
    }

    private void llenarLabels() {
        labelNombre1.setText(personaje1.getpDatosHeroe().getmPseudonimo());
        labelNombre2.setText(personaje2.getpDatosHeroe().getmPseudonimo());
        
        int maxVidaTemp1 = personaje1.getpDatosHeroe().getpPoder().getpVida() * 10;
        barVida1.setMaximum(maxVidaTemp1);
        barVida1.setValue(maxVidaTemp1);
        
        int maxVidaTemp2 = personaje2.getpDatosHeroe().getpPoder().getpVida() * 10;
        barVida2.setMaximum(maxVidaTemp2);
        barVida2.setValue(maxVidaTemp2);
        
        labelVida1.setText("" + maxVidaTemp1);
        labelVida2.setText("" + maxVidaTemp2);    
    }
    
    private void crearEstadistica(String estado) {
        Estadistica estadistica = new Estadistica(A_ControlAcceso.usuario, estado, personaje1);
        ManejoJSON.guardarJSON(this, Estadistica.RUTA);
    }
}
